cmake_minimum_required(VERSION 3.17)
include(CMakeDependentOption)
project(AdjustablePhysics2D)

set(CMAKE_CXX_STANDARD 14)

option(AP2D_PRECISION_DOUBLE "Use double precision" OFF)
if(AP2D_PRECISION_DOUBLE)
    add_compile_definitions(USE_DOUBLE_PRECISION)
endif()

cmake_dependent_option(AP2D_SHAPES_CIRCLES_ONLY "Use circles only" OFF "NOT AP2D_SHAPES_AABB_ONLY;NOT AP2D_SHAPES_PRIMITIVES_ONLY" OFF)
cmake_dependent_option(AP2D_SHAPES_AABB_ONLY "Use AABB only" OFF "NOT AP2D_SHAPES_CIRCLES_ONLY;NOT AP2D_SHAPES_PRIMITIVES_ONLY" OFF)
cmake_dependent_option(AP2D_SHAPES_PRIMITIVES_ONLY "Use primitives only" OFF "NOT AP2D_SHAPES_CIRCLES_ONLY;NOT AP2D_SHAPES_AABB_ONLY" OFF)
if(AP2D_SHAPES_CIRCLES_ONLY)
    add_compile_definitions(USE_CIRCLES_ONLY USE_PRIMITIVES_ONLY)
elseif(AP2D_SHAPES_AABB_ONLY)
    add_compile_definitions(USE_AABB_ONLY USE_PRIMITIVES_ONLY)
elseif(AP2D_SHAPES_PRIMITIVES_ONLY)
    add_compile_definitions(USE_PRIMITIVES_ONLY)
endif()

option(AP2D_MOVEMENT_ROTATION "Use rotation" ON)
if(AP2D_MOVEMENT_ROTATION)
    add_compile_definitions(USE_ROTATION)
endif()

option(AP2D_MOVEMENT_ACCELERATION "Use acceleration" ON)
if(AP2D_MOVEMENT_ACCELERATION)
    add_compile_definitions(USE_ACCELERATION)
endif()

cmake_dependent_option(AP2D_MOVEMENT_EULER "Use Euler movement method" OFF "AP2D_MOVEMENT_ACCELERATION;NOT AP2D_MOVEMENT_LEAPFROG;NOT AP2D_MOVEMENT_SYMPLECTIC_EULER;NOT AP2D_MOVEMENT_RK4" OFF)
cmake_dependent_option(AP2D_MOVEMENT_SYMPLECTIC_EULER "Use symplectic Euler movement method" OFF "AP2D_MOVEMENT_ACCELERATION;NOT AP2D_MOVEMENT_EULER;NOT AP2D_MOVEMENT_LEAPFROG;NOT AP2D_MOVEMENT_RK4" OFF)
cmake_dependent_option(AP2D_MOVEMENT_RK4 "Use classic Runge-Kutta movement method" OFF "AP2D_MOVEMENT_ACCELERATION;NOT AP2D_MOVEMENT_EULER;NOT AP2D_MOVEMENT_SYMPLECTIC_EULER;NOT AP2D_MOVEMENT_LEAPFROG" OFF)
cmake_dependent_option(AP2D_MOVEMENT_LEAPFROG "Use leapfrog movement method" ON "AP2D_MOVEMENT_ACCELERATION;NOT AP2D_MOVEMENT_EULER;NOT AP2D_MOVEMENT_SYMPLECTIC_EULER;NOT AP2D_MOVEMENT_RK4" OFF)
if(AP2D_MOVEMENT_EULER)
    add_compile_definitions(USE_EULER)
elseif(AP2D_MOVEMENT_SYMPLECTIC_EULER)
    add_compile_definitions(USE_SYMPLECTIC_EULER)
elseif(AP2D_MOVEMENT_RK4)
    add_compile_definitions(USE_RK4)
elseif(AP2D_MOVEMENT_LEAPFROG)
    add_compile_definitions(USE_LEAPFROG)
elseif(AP2D_MOVEMENT_ACCELERATION)
    message(SEND_ERROR "No movement algorithm specified!")
endif()

cmake_dependent_option(AP2D_MASSINFO_INERTIA "Use inertia" ON "AP2D_MOVEMENT_ROTATION" OFF)
if(AP2D_MASSINFO_INERTIA)
    add_compile_definitions(USE_INERTIA)
endif()

option(AP2D_MASSINFO_EQUAL_MASSES "Use equal masses" OFF)
if(AP2D_MASSINFO_EQUAL_MASSES)
    add_compile_definitions(USE_EQUAL_MASSES)
endif()

option(AP2D_MATERIAL_FRICTION "Use friction" ON)
if(AP2D_MATERIAL_FRICTION)
    add_compile_definitions(USE_FRICTION)
endif()

option(AP2D_MATERIAL_BOUNCINESS "Use bounciness" ON)
if(AP2D_MATERIAL_BOUNCINESS)
    add_compile_definitions(USE_BOUNCINESS)
endif()

cmake_dependent_option(AP2D_MATERIAL_DENSITY "Use density" ON "NOT AP2D_MASSINFO_EQUAL_MASSES" OFF)
if(AP2D_MATERIAL_DENSITY)
    add_compile_definitions(USE_DENSITY)
endif()

if(AP2D_MATERIAL_FRICTION OR AP2D_MATERIAL_BOUNCINESS OR AP2D_MATERIAL_DENSITY)
    add_compile_definitions(USE_MATERIAL)
endif()

option(AP2D_GRAVITATION_GLOBAL "Use global gravitation" ON)
if(AP2D_GRAVITATION_GLOBAL)
    add_compile_definitions(USE_GLOBAL_GRAVITATION)
endif()

option(AP2D_GRAVITATION_FORCE "Use gravitational force" OFF)
if(AP2D_GRAVITATION_FORCE)
    add_compile_definitions(USE_GRAVITATIONAL_FORCE)
endif()

option(AP2D_BROADPHASE "Use broad phase for collision detection" OFF)
if(AP2D_BROADPHASE)
    if(AP2D_PRECISION_QUADTREE OR AP2D_BROADPHASE_SPATIAL_HASHING OR AP2D_BROADPHASE_SWEEP_AND_PRUNE)
        add_compile_definitions(USE_BROAD_PHASE)
    else()
        message(SEND_ERROR "Broad phase is enabled but no method specified!")
    endif()
endif()

cmake_dependent_option(AP2D_PRECISION_QUADTREE "Use quadtree: Barnes-Hut for gravitational forces and/or for broad phase" OFF "AP2D_GRAVITATION_FORCE OR AP2D_BROADPHASE" OFF)
if(AP2D_PRECISION_QUADTREE)
    add_compile_definitions(USE_QUADTREE)
endif()

cmake_dependent_option(AP2D_BROADPHASE_SPATIAL_HASHING "Use spatial hashing" OFF "AP2D_BROADPHASE;NOT AP2D_BROADPHASE_SWEEP_AND_PRUNE" OFF)
cmake_dependent_option(AP2D_BROADPHASE_SWEEP_AND_PRUNE "Use sweep and prune" OFF "AP2D_BROADPHASE;NOT AP2D_BROADPHASE_SPATIAL_HASHING" OFF)
cmake_dependent_option(AP2D_BROADPHASE_UNIT_CELL_SIZE "Use unit cell size for spatial hashing" OFF "AP2D_BROADPHASE_SPATIAL_HASHING" OFF)
if(AP2D_BROADPHASE_SPATIAL_HASHING)
    add_compile_definitions(USE_SPATIAL_HASHING)
    if(AP2D_BROADPHASE_UNIT_CELL_SIZE)
        add_compile_definitions(USE_UNIT_CELL_SIZE)
    endif()
elseif(AP2D_BROADPHASE_SWEEP_AND_PRUNE)
    add_compile_definitions(USE_SWEEP_AND_PRUNE)
endif()

cmake_dependent_option(AP2D_COLLISION_DISPLACEMENT "Use collision displacement resolving algorithm" OFF "NOT AP2D_COLLISION_HOOKE;NOT AP2D_COLLISION_IMPULSE" OFF)
cmake_dependent_option(AP2D_COLLISION_HOOKE "Use collision Hooke resolving algorithm" OFF "NOT AP2D_COLLISION_DISPLACEMENT;NOT AP2D_COLLISION_IMPULSE" OFF)
cmake_dependent_option(AP2D_COLLISION_IMPULSE "Use collision impulse resolving algorithm" ON "NOT AP2D_COLLISION_HOOKE;NOT AP2D_COLLISION_DISPLACEMENT" OFF)
if(AP2D_COLLISION_DISPLACEMENT)
    add_compile_definitions(USE_COLLISION_DISPLACEMENT)
elseif(AP2D_COLLISION_HOOKE)
    add_compile_definitions(USE_COLLISION_HOOKE)
elseif(AP2D_COLLISION_IMPULSE)
    add_compile_definitions(USE_COLLISION_IMPULSE)
else()
    message(SEND_ERROR "No collision resolving method specified!")
endif()

option(AP2D_COLLISION_FILTER "Use collision filter" OFF)
if(AP2D_COLLISION_FILTER)
    add_compile_definitions(USE_COLLISION_FILTER)
endif()

option(AP2D_CONSTRAINTS "Use constraints" OFF)
if(AP2D_CONSTRAINTS)
    add_compile_definitions(USE_CONSTRAINT)
endif()

option(AP2D_CONSTRAINTS_JOINTS "Use joints" OFF)
if(AP2D_CONSTRAINTS_JOINTS)
    add_compile_definitions(USE_JOINT)
endif()

add_subdirectory(src)
add_subdirectory(test)